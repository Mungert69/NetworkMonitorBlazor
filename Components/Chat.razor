@using NetworkMonitorBlazor.Services
@using NetworkMonitorBlazor.Models
@inject ChatStateService ChatState
@inject WebSocketService WebSocketService
@inject AudioService AudioService
@inject IJSRuntime JSRuntime

<ChatContent @ref="chatContentRef"
             OnHostLinkClick="OnHostLinkClick"
             IsDashboard="@IsDashboard"
             InitRunnerType="@InitRunnerType"
             SetIsChatOpen="@SetIsChatOpen"
             SiteId="@SiteId" />

@code {
    private ChatContent? chatContentRef;
    private bool _isInitialized = false;

    [Parameter]
    public EventCallback<HostLink> OnHostLinkClick { get; set; }

    [Parameter]
    public bool IsDashboard { get; set; }

    [Parameter]
    public string InitRunnerType { get; set; } = "TurboLLM";

    [Parameter]
    public EventCallback<bool> SetIsChatOpen { get; set; }

    [Parameter]
    public string SiteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            // Initialize chat state first to get session ID
            await ChatState.Initialize(InitRunnerType);
            
            // Initialize WebSocket with the obtained session ID
            await WebSocketService.Initialize(SiteId, ChatState.SessionId);
            
            // Verify connection
            await VerifyConnection();
            
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Initialization failed: {ex}");
            await RecoverFromError();
        }
    }

    private async Task VerifyConnection()
    {
        // Send verification message
        await WebSocketService.SendMessage($"<|VERIFY_SESSION|{ChatState.SessionId}|>");
        
        // Add timeout check
        await Task.Delay(2000); // Wait 2 seconds for response
    }

    private async Task RecoverFromError()
    {
        // Clear any existing session
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "sessionId");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "sessionTimestamp");
        
        // Retry initialization
        await OnInitializedAsync();
    }

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        // Initialize ChatState FIRST
        await ChatState.Initialize(InitRunnerType);
        
        // THEN initialize WebSocket with BOTH parameters
        await WebSocketService.Initialize(SiteId, ChatState.SessionId);  // Add sessionId
    }

    // Keep your existing auto-scroll logic
    if (ChatState.AutoScrollEnabled)
    {
        //await JSRuntime.InvokeVoidAsync("scrollToBottom", outputContainerRef);
    }
}
    private async Task LoadInitialState()
    {
        try 
        {
            // Request session history if needed
            await WebSocketService.SendMessage($"<|REQUEST_HISTORY|{ChatState.SessionId}|>");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load initial state: {ex}");
        }
    }

    private async Task ResetSessionId()
{
    await WebSocketService.SendMessage("<|REMOVE_SESSION|>");
    
    // Clear existing session
    await ChatState.ClearSession();  // Use ChatState's new method
    
    // Create new session
    await ChatState.Initialize(InitRunnerType);
    
    // Reinitialize WebSocket
    await WebSocketService.Initialize(SiteId, ChatState.SessionId);
}

private async Task ResetLLM()
{
    await WebSocketService.SendMessage("<|REMOVE_SESSION|>");
    
    // Clear and recreate session
    await ChatState.ClearSession();
    await ChatState.Initialize(InitRunnerType);
    
    // Reinitialize WebSocket
    await WebSocketService.Initialize(SiteId, ChatState.SessionId);
}
}